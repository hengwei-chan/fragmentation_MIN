from pyscf import gto
from pyscf import scf
from pyscf import cc
from pyscf.cc import ccsd_t_lambda_slow as ccsd_t_lambda
from pyscf.grad import ccsd_t as ccsd_t_grad
from pyscf.geomopt import berny_solver

mol = gto.Mole()
mol.atom = '''
C -0.19539999999999999 1.23419999999999996 0.872199999999999975
C 1.04279999999999995 1.44340000000000002 -0.00790000000000000077
C 0 0 1.76730000000000009
H -0.356399999999999995 2.09220000000000006 1.44480000000000008
H 0.930599999999999983 0.112199999999999994 2.35230000000000006
H 1.91399999999999992 1.56420000000000003 0.616700000000000026
H 0.851400000000000046 2.33639999999999981 -0.563799999999999968
C -1.23419999999999996 -0.19539999999999999 -0.872199999999999975
C 0.19539999999999999 -1.23419999999999996 0.872199999999999975
C 1.23419999999999996 0.19539999999999999 -0.872199999999999975
C -1.44340000000000002 1.04279999999999995 0.00790000000000000077
C -1.04279999999999995 -1.44340000000000002 -0.00790000000000000077
C 1.44340000000000002 -1.04279999999999995 0.00790000000000000077
C 0 0 -1.76730000000000009
H -2.09220000000000006 -0.356399999999999995 -1.44480000000000008
H 0.356399999999999995 -2.09220000000000006 1.44480000000000008
H 2.09220000000000006 0.356399999999999995 -1.44480000000000008
H -0.112199999999999994 0.930599999999999983 -2.35230000000000006
H -0.930599999999999983 -0.112199999999999994 2.35230000000000006
H 0.112199999999999994 -0.930599999999999983 -2.35230000000000006
H -1.56420000000000003 1.91399999999999992 -0.616700000000000026
H -1.91399999999999992 -1.56420000000000003 0.616700000000000026
H 1.56420000000000003 -1.91399999999999992 -0.616700000000000026
H -2.33639999999999981 0.851400000000000046 0.563799999999999968
H -0.851400000000000046 -2.33639999999999981 -0.563799999999999968
H 2.33639999999999981 -0.851400000000000046 0.563799999999999968
'''
mol.basis = 'ccpvdz'
mol.build()

mf = scf.RHF(mol)
cc_scan = cc.CCSD(mf).as_scanner()

def f(mol):
    # Compute CCSD(T) energy
    mf = scf.RHF(mol).run()
    mycc = cc.CCSD(mf).run()
    et_correction = mycc.ccsd_t()
    e_tot = mycc.e_tot + et_correction

    # Compute CCSD(T) gradients
    g = ccsd_t_grad.Gradients(mycc).kernel()
    print('CCSD(T) nuclear gradients:')
    print(g)
    return e_tot, g

fake_method = berny_solver.as_pyscf_method(mol, f)

new_mol = berny_solver.optimize(fake_method)

print('Old geometry (Bohr)')
print(mol.atom_coords())

print('New geometry (Bohr)')
print(new_mol.atom_coords())

